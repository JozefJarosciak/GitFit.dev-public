name: Build All Platforms

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'website/**'
      - '*.md'
      - 'docs/**'
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build-windows:
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[website-only]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow pystray

    # Icons pre-generated in assets folder, no need to generate
    # - name: Generate icons
    #   run: |
    #     python packaging/gen_icons.py || echo "Icon generation failed, continuing..."
    #   continue-on-error: true

    - name: Build with PyInstaller
      run: |
        python -m PyInstaller --name="GitFitDev" --windowed --onefile --icon="assets\icon_win.ico" --add-data "gitfitdev\lang_en.py;gitfitdev" --add-data "gitfitdev\lang_sk.py;gitfitdev" --hidden-import="gitfitdev.lang_en" --hidden-import="gitfitdev.lang_sk" --hidden-import="pystray._win32" entry.py

    - name: Download Inno Setup
      run: |
        Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "innosetup.exe"

    - name: Install Inno Setup
      run: |
        Start-Process -FilePath ".\innosetup.exe" -ArgumentList "/VERYSILENT","/SUPPRESSMSGBOXES","/NORESTART","/SP-" -Wait

    - name: Build installer
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer\gitfit_installer.iss

    - name: Decode signing certificate
      if: env.SIGN_CERTIFICATE_BASE64 != ''
      env:
        SIGN_CERTIFICATE_BASE64: ${{ secrets.SIGN_CERTIFICATE_BASE64 }}
      run: |
        Write-Host "Decoding signing certificate..."
        $certBytes = [Convert]::FromBase64String($env:SIGN_CERTIFICATE_BASE64)
        [IO.File]::WriteAllBytes("SigningCertificate.pfx", $certBytes)
        Write-Host "Certificate decoded"

    - name: Sign installer
      if: env.SIGN_CERTIFICATE_BASE64 != ''
      env:
        SIGN_CERTIFICATE_BASE64: ${{ secrets.SIGN_CERTIFICATE_BASE64 }}
        SIGN_CERTIFICATE_PASSWORD: ${{ secrets.SIGN_CERTIFICATE_PASSWORD }}
      run: |
        Write-Host "Signing installer..."
        $installer = Get-ChildItem "dist\GitFitDev-*-Setup.exe" | Select-Object -First 1
        if (-not $installer) {
          Write-Error "No installer found to sign!"
          exit 1
        }

        # Find signtool - Windows Server 2022 on GitHub has it installed
        $signtool = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
        if (-not (Test-Path $signtool)) {
          $signtool = "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe"
        }
        if (-not (Test-Path $signtool)) {
          # Search for signtool
          $signtool = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits" -Filter "signtool.exe" -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.Directory.Name -eq "x64" } | Select-Object -First 1 -ExpandProperty FullName
        }

        if ($signtool -and (Test-Path $signtool)) {
          Write-Host "Using signtool: $signtool"
          if ($env:SIGN_CERTIFICATE_PASSWORD) {
            & $signtool sign /f "SigningCertificate.pfx" /p $env:SIGN_CERTIFICATE_PASSWORD /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 $installer.FullName
          } else {
            & $signtool sign /f "SigningCertificate.pfx" /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 $installer.FullName
          }
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Installer signed successfully"
            & $signtool verify /pa $installer.FullName
          } else {
            Write-Warning "Signing failed but continuing build"
          }
        } else {
          Write-Warning "Signtool not found - installer will not be signed"
        }

        # Clean up certificate
        Remove-Item -Force "SigningCertificate.pfx" -ErrorAction SilentlyContinue

    - name: Upload Windows EXE
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-Windows-Portable
        path: dist\GitFitDev.exe

    - name: Upload Windows Installer
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-Windows-Setup
        path: dist\GitFitDev-1.0.0-Setup.exe

  build-macos:
    runs-on: macos-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[website-only]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Force reinstall Pillow to ensure we get the right architecture
        pip install --force-reinstall --no-binary :all: pillow
        pip install pyinstaller pystray pyobjc-framework-Cocoa

    - name: Create icon
      run: |
        python packaging/create_mac_icon.py || true

    - name: Clean ALL caches
      run: |
        rm -rf build dist *.spec
        rm -rf ~/.pyinstaller
        rm -rf ~/Library/Caches/pyinstaller
        rm -rf /tmp/pyinstaller*
        echo "All caches cleaned"

    - name: Use NEW entry point file
      run: |
        echo "=== Using NEW gitfit_entry.py to bypass cache ==="
        echo "Content of gitfit_entry.py:"
        cat entry.py
        echo ""
        echo "Verifying it uses gitfitdev:"
        grep "from gitfitdev" entry.py

    - name: Build app with PyInstaller
      run: |
        # Build for current architecture (ARM64 on GitHub runners)
        echo "Building macOS app..."

        pyinstaller --clean --noconfirm \
          --name="GitFit.dev" \
          --windowed \
          --onedir \
          --icon="assets/icon.icns" \
          --osx-bundle-identifier="dev.gitfit.app" \
          --paths="." \
          --add-data "gitfitdev:gitfitdev" \
          --collect-all="gitfitdev" \
          --collect-all="pystray" \
          --hidden-import="gitfitdev" \
          --hidden-import="gitfitdev.app" \
          --hidden-import="gitfitdev.config" \
          --hidden-import="gitfitdev.themes" \
          --hidden-import="gitfitdev.lang_en" \
          --hidden-import="gitfitdev.lang_sk" \
          --hidden-import="pystray._darwin" \
          entry.py

        # Fix Info.plist
        /usr/libexec/PlistBuddy -c "Add :LSUIElement bool true" "dist/GitFit.dev.app/Contents/Info.plist" 2>/dev/null || \
        /usr/libexec/PlistBuddy -c "Set :LSUIElement true" "dist/GitFit.dev.app/Contents/Info.plist"

        # Ensure executable has correct permissions
        chmod +x "dist/GitFit.dev.app/Contents/MacOS/GitFit.dev"

        # Show architecture info
        echo "Architecture info:"
        file "dist/GitFit.dev.app/Contents/MacOS/GitFit.dev"

        # List contents to verify
        echo "App contents:"
        ls -la "dist/GitFit.dev.app/Contents/MacOS/"
        echo "Resources:"
        ls -la "dist/GitFit.dev.app/Contents/Resources/" | head -10

        # Remove quarantine attribute
        xattr -cr "dist/GitFit.dev.app"

    - name: Create DMG installer
      run: |
        mkdir -p dist/dmg
        cp -R "dist/GitFit.dev.app" "dist/dmg/"

        # Copy the installer script
        cp "packaging/Install_GitFit.command" "dist/dmg/"
        chmod +x "dist/dmg/Install_GitFit.command"

        cat > dist/dmg/README.txt << EOF
        GitFit.dev - Fitness Break Reminder
        =====================================

        EASY INSTALLATION:
        1. Double-click "Install_GitFit.command"
        2. Follow the prompts
        3. Done! The app will appear in your menu bar

        The app runs in the MENU BAR only (top of screen)
        EOF

        hdiutil create -volname "GitFit.dev Installer" \
          -srcfolder "dist/dmg" \
          -ov -format UDZO \
          "dist/GitFitDev-macOS.dmg"

    - name: Upload macOS App
      uses: actions/upload-artifact@v4
      with:
        name: GitFit.dev-macOS-App
        path: dist/GitFit.dev.app

    - name: Upload macOS DMG
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-macOS-Installer
        path: dist/GitFitDev-macOS.dmg

  build-linux:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[website-only]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev libgtk-3-dev libayatana-appindicator3-dev gir1.2-ayatanaappindicator3-0.1 python3-gi python3-gi-cairo gir1.2-gtk-3.0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow pystray
        # Use system PyGObject instead of pip version

    - name: Build Linux executable
      run: |
        pyinstaller --clean --noconfirm \
          --name="GitFitDev" \
          --onefile \
          --add-data "gitfitdev:gitfitdev" \
          --hidden-import="gitfitdev.lang_en" \
          --hidden-import="gitfitdev.lang_sk" \
          --hidden-import="pystray._gtk" \
          entry.py

    - name: Create AppImage structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

        # Copy executable
        cp dist/GitFitDev AppDir/usr/bin/

        # Create desktop file
        cat > AppDir/usr/share/applications/gitfit.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=GitFit.dev
        Comment=Fitness break reminders for developers
        Exec=GitFitDev
        Icon=gitfit
        Categories=Utility;Health;
        StartupNotify=false
        EOF

        # Copy icon
        cp assets/icon_256.png AppDir/usr/share/icons/hicolor/256x256/apps/gitfit.png

        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export PATH="${HERE}/usr/bin/:${PATH}"
        exec "${HERE}/usr/bin/GitFitDev" "$@"
        EOF
        chmod +x AppDir/AppRun

    - name: Create portable tarball
      run: |
        mkdir -p GitFitDev-Linux
        cp dist/GitFitDev GitFitDev-Linux/
        cp assets/icon_256.png GitFitDev-Linux/gitfit.png

        # Create launcher script
        cat > GitFitDev-Linux/run.sh << 'EOF'
        #!/bin/bash
        # GitFit.dev Linux Launcher
        cd "$(dirname "$0")"
        ./GitFitDev
        EOF
        chmod +x GitFitDev-Linux/run.sh

        # Create install script
        cat > GitFitDev-Linux/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing GitFit.dev..."

        # Create application directory
        mkdir -p ~/.local/share/gitfitdev
        cp GitFitDev ~/.local/share/gitfitdev/
        cp gitfit.png ~/.local/share/gitfitdev/

        # Create desktop entry
        mkdir -p ~/.local/share/applications
        cat > ~/.local/share/applications/gitfit.desktop << EOD
        [Desktop Entry]
        Type=Application
        Name=GitFit.dev
        Comment=Fitness break reminders for developers
        Exec=$HOME/.local/share/gitfitdev/GitFitDev
        Icon=$HOME/.local/share/gitfitdev/gitfit.png
        Categories=Utility;Health;
        StartupNotify=false
        EOD

        echo "GitFit.dev installed successfully!"
        echo "You can find it in your application menu or run: ~/.local/share/gitfitdev/GitFitDev"
        EOF
        chmod +x GitFitDev-Linux/install.sh

        tar -czf GitFitDev-Linux.tar.gz GitFitDev-Linux/

    - name: Upload Linux Executable
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-Linux-Portable
        path: dist/GitFitDev

    - name: Upload Linux Package
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-Linux-Package
        path: GitFitDev-Linux.tar.gz

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure
      run: ls -la

    - name: Upload to Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          GitFitDev-Windows-Setup/GitFitDev-1.0.0-Setup.exe
          GitFitDev-macOS-Installer/GitFitDev-macOS.dmg
        fail_on_unmatched_files: false