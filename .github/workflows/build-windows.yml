name: Build Windows Installer

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'website/**'
      - '*.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[website-only]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow pystray pyperclip

    - name: Create version info
      run: |
        $version = "1.0.0"
        $build = Get-Date -Format "yyyyMMdd.HHmm"
        @"
        APP_VERSION = '$version'
        BUILD_NUMBER = '$build'
        BUILD_DATE = '$(Get-Date -Format "yyyy-MM-dd HH:mm:ss")'
        "@ | Out-File -FilePath "version_info.py"

    - name: Build executable with PyInstaller
      run: |
        python -m PyInstaller --clean --noconfirm --name="GitFitDev" --windowed --onefile --icon="assets\icon_win.ico" --add-data "gitfitdev\lang_en.py;gitfitdev" --add-data "gitfitdev\lang_sk.py;gitfitdev" --hidden-import="gitfitdev.lang_en" --hidden-import="gitfitdev.lang_sk" --hidden-import="pystray._win32" --hidden-import="PIL._tkinter_finder" entry.py

    - name: Test executable runs
      run: |
        if (Test-Path "dist\GitFitDev.exe") { Write-Host "✓ Executable built successfully"; $size = (Get-Item "dist\GitFitDev.exe").Length / 1MB; Write-Host "✓ Size: $([math]::Round($size, 2)) MB" } else { Write-Error "Executable not found!"; exit 1 }

    - name: Create ZIP package
      run: |
        Write-Host "Creating ZIP package..."
        $version = "1.0.0"
        $build = Get-Date -Format "yyyyMMdd.HHmm"
        Compress-Archive -Path "dist\GitFitDev.exe" -DestinationPath "dist\GitFitDev-v$version-$build-Windows.zip"
        Write-Host "✓ ZIP package created successfully"

    - name: Check if Inno Setup is available
      id: inno-check
      run: |
        $innoPath = Get-Command "iscc.exe" -ErrorAction SilentlyContinue
        if ($innoPath) {
          Write-Host "✓ Inno Setup found at: $($innoPath.Source)"
          echo "available=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "⚠ Inno Setup not found - installer will be skipped"
          echo "available=false" >> $env:GITHUB_OUTPUT
        }

    - name: Install Inno Setup
      if: steps.inno-check.outputs.available == 'false'
      run: |
        Write-Host "Installing Inno Setup..."
        $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $output = "$env:TEMP\innosetup.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/SILENT" -Wait
        # Add to PATH for current session
        $env:PATH += ";${env:ProgramFiles(x86)}\Inno Setup 6"
        echo "${env:ProgramFiles(x86)}\Inno Setup 6" >> $env:GITHUB_PATH

    - name: Create Inno Setup installer
      run: |
        Write-Host "Creating Inno Setup installer..."
        $isccPath = Get-Command "iscc.exe" -ErrorAction SilentlyContinue
        if (-not $isccPath) {
          $isccPath = "${env:ProgramFiles(x86)}\Inno Setup 6\iscc.exe"
        }
        if (Test-Path $isccPath) {
          & $isccPath "installer\gitfit_installer.iss"
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ Installer created successfully"
          } else {
            Write-Host "⚠ Installer creation failed (exit code: $LASTEXITCODE)" -ForegroundColor Yellow
          }
        } else {
          Write-Host "⚠ Inno Setup compiler not found - installer skipped" -ForegroundColor Yellow
        }

    - name: Display build info
      run: |
        Write-Host "Build artifacts:"
        Get-ChildItem dist\* | ForEach-Object {
          $size = [math]::Round($_.Length / 1MB, 2)
          Write-Host " - $($_.Name): $size MB"
        }

    - name: Upload portable executable
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-${{ github.sha }}-portable
        path: dist\GitFitDev.exe
        retention-days: 30

    - name: Upload ZIP package
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-${{ github.sha }}-zip
        path: dist\GitFitDev-*.zip
        retention-days: 30

    - name: Upload installer
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if installer creation failed
      with:
        name: GitFitDev-${{ github.sha }}-installer
        path: dist\GitFitDev-*-Setup.exe
        retention-days: 30

    - name: Create latest release (on main branch)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: GitFitDev-latest-windows
        path: |
          dist\GitFitDev.exe
          dist\GitFitDev-*.zip
          dist\GitFitDev-*-Setup.exe
        retention-days: 7